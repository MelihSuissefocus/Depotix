services:
  web:
    build:
      context: ..
      dockerfile: ui/Dockerfile
      args:
        NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
    env_file: .env
    environment:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL}
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped
    networks:
    - appnet
  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    env_file: .env
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DATABASE_URL: ${DATABASE_URL}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      TZ: ${TZ}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
    - appnet
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: depotix
      POSTGRES_USER: depotix
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: ${TZ}
    volumes:
    - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U depotix -d depotix
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
    - appnet
  caddy:
    image: caddy:2
    depends_on:
      web:
        condition: service_started
      api:
        condition: service_started
    ports:
    - 80:80
    - 443:443
    volumes:
    - ./Caddyfile:/etc/caddy/Caddyfile:ro
    - caddy_data:/data
    - caddy_config:/config
    restart: unless-stopped
    networks:
    - appnet
networks:
  appnet: {}
volumes:
  caddy_data: {}
  caddy_config: {}
  postgres_data: {}
