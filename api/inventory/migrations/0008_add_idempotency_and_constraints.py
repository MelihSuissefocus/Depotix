# Generated by Django - Phase 2: Audit Security & ACID Hardening

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0007_populate_customer_numbers'),
    ]

    operations = [
        # ========================================================================
        # 1. ADD IDEMPOTENCY_KEY FIELD
        # ========================================================================
        migrations.AddField(
            model_name='stockmovement',
            name='idempotency_key',
            field=models.CharField(
                max_length=64,
                unique=True,
                null=True,  # Allow null for existing records
                blank=True,
                help_text="UUID for idempotent operations - prevents duplicate submissions",
                db_index=True,
            ),
        ),

        # ========================================================================
        # 2. HARDEN qty_base CONSTRAINT: Must be > 0 (not >= 0)
        # ========================================================================
        migrations.RunSQL(
            sql="""
                -- Drop existing constraint if exists
                ALTER TABLE inventory_stockmovement
                DROP CONSTRAINT IF EXISTS inventory_stockmovement_qty_base_check;

                -- Add stricter constraint: qty_base > 0
                ALTER TABLE inventory_stockmovement
                ADD CONSTRAINT inventory_stockmovement_qty_base_check
                CHECK (qty_base > 0);
            """,
            reverse_sql="""
                -- Rollback to original constraint
                ALTER TABLE inventory_stockmovement
                DROP CONSTRAINT IF EXISTS inventory_stockmovement_qty_base_check;

                ALTER TABLE inventory_stockmovement
                ADD CONSTRAINT inventory_stockmovement_qty_base_check
                CHECK (qty_base >= 0);
            """
        ),

        # ========================================================================
        # 3. ADD NEGATIVE STOCK PROTECTION: InventoryItem.quantity >= 0
        # ========================================================================
        migrations.RunSQL(
            sql="""
                -- Add constraint to prevent negative inventory
                ALTER TABLE inventory_inventoryitem
                ADD CONSTRAINT inventory_inventoryitem_quantity_non_negative
                CHECK (quantity >= 0);
            """,
            reverse_sql="""
                -- Rollback: Remove constraint
                ALTER TABLE inventory_inventoryitem
                DROP CONSTRAINT IF EXISTS inventory_inventoryitem_quantity_non_negative;
            """
        ),

        # ========================================================================
        # 4. ADD PERFORMANCE INDEXES
        # ========================================================================
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(
                fields=['item', 'type', 'created_at'],
                name='stockmov_item_type_time_idx'
            ),
        ),

        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(
                fields=['created_by', 'created_at'],
                name='stockmov_user_time_idx'
            ),
        ),

        # ========================================================================
        # 5. VALIDATE EXISTING DATA (Safety check before applying constraints)
        # ========================================================================
        migrations.RunSQL(
            sql="""
                -- Check for invalid existing data
                DO $$
                DECLARE
                    invalid_qty_count INTEGER;
                    negative_inventory_count INTEGER;
                BEGIN
                    -- Check for movements with qty_base = 0
                    SELECT COUNT(*) INTO invalid_qty_count
                    FROM inventory_stockmovement
                    WHERE qty_base = 0;

                    IF invalid_qty_count > 0 THEN
                        RAISE EXCEPTION 'Found % movements with qty_base = 0. Migration aborted.', invalid_qty_count;
                    END IF;

                    -- Check for negative inventory
                    SELECT COUNT(*) INTO negative_inventory_count
                    FROM inventory_inventoryitem
                    WHERE quantity < 0;

                    IF negative_inventory_count > 0 THEN
                        RAISE WARNING 'Found % items with negative quantity. Will be corrected to 0.', negative_inventory_count;

                        -- Auto-correct negative inventory to 0
                        UPDATE inventory_inventoryitem
                        SET quantity = 0
                        WHERE quantity < 0;
                    END IF;
                END $$;
            """,
            reverse_sql=migrations.RunSQL.noop
        ),
    ]
